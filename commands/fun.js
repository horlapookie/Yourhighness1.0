const config = require('../config');
const { getRandomFact, getRandomJoke, getChatGPTResponse } = require('../utils/api');

const commands = {
    // Brazzers meme
    brazzers: async (conn, msg, args) => {
        try {
            if (!msg.quoted || !msg.quoted.isImage) {
                return msg.reply('‚ùå Please reply to an image to add the Brazzers logo.');
            }

            await msg.react('‚è≥');
            
            const media = await msg.quoted.download();
            // In a real implementation, you would process the image to add the Brazzers logo
            // For now, we'll just send the original image with a caption
            
            await conn.sendMessage(msg.from, {
                image: media,
                caption: `üîû *BRAZZERS* üîû\n\n_Created by yourh√Øghness_\nüîó ${config.CHANNEL_URL}`
            }, { quoted: msg });
            
            await msg.react('‚úÖ');
            
        } catch (error) {
            console.error('Error in brazzers command:', error);
            await msg.react('‚ùå');
            return msg.reply('‚ùå Failed to process the brazzers meme.');
        }
    },

    // Chat with AI
    chat: async (conn, msg, args) => {
        try {
            if (!args.length) {
                return msg.reply('‚ùå Please provide a message to chat.\n\nUsage: `+chat Hello, how are you?`');
            }

            const query = args.join(' ');
            await msg.react('ü§ñ');

            const response = await getChatGPTResponse(query);
            
            await msg.reply(
                `ü§ñ *AI Chat Response* ü§ñ\n\n` +
                `üí≠ ${response}\n\n` +
                `_Powered by yourh√Øghness_\n` +
                `üîó ${config.CHANNEL_URL}`
            );

        } catch (error) {
            console.error('Error in chat command:', error);
            await msg.reply('‚ùå Failed to get AI response. The AI service might be unavailable.');
        }
    },

    // ChatGPT (alias for chat)
    chatgpt: async (conn, msg, args) => {
        await commands.chat(conn, msg, args);
    },

    // Random fact
    fact: async (conn, msg, args) => {
        try {
            await msg.react('üß†');
            
            const fact = await getRandomFact();
            
            await msg.reply(
                `üß† *Random Fact* üß†\n\n` +
                `üí° ${fact}\n\n` +
                `_Did you know? - yourh√Øghness_\n` +
                `üîó ${config.CHANNEL_URL}`
            );

        } catch (error) {
            console.error('Error in fact command:', error);
            await msg.reply('‚ùå Failed to fetch a random fact.');
        }
    },

    // Friendship meter
    friendship: async (conn, msg, args) => {
        try {
            if (!msg.isGroup) {
                return msg.reply('‚ùå This command can only be used in groups.');
            }

            const mentioned = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid;
            if (!mentioned || mentioned.length < 2) {
                return msg.reply('‚ùå Please mention two users to check their friendship level.\n\nUsage: `+friendship @user1 @user2`');
            }

            const user1 = mentioned[0].split('@')[0];
            const user2 = mentioned[1].split('@')[0];
            const percentage = Math.floor(Math.random() * 101);
            
            let status = '';
            if (percentage < 20) status = 'üíî Enemies';
            else if (percentage < 40) status = 'üòê Strangers';
            else if (percentage < 60) status = 'üôÇ Acquaintances';
            else if (percentage < 80) status = 'üòä Good Friends';
            else if (percentage < 95) status = 'üë´ Best Friends';
            else status = 'üíï Soulmates';

            await msg.reply(
                `üí´ *Friendship Meter* üí´\n\n` +
                `üë• ${user1} & ${user2}\n` +
                `üìä Friendship Level: ${percentage}%\n` +
                `üíñ Status: ${status}\n\n` +
                `${'‚ñà'.repeat(Math.floor(percentage / 10))}${'‚ñë'.repeat(10 - Math.floor(percentage / 10))} ${percentage}%\n\n` +
                `_Calculated by yourh√Øghness_\n` +
                `üîó ${config.CHANNEL_URL}`,
                { mentions: mentioned }
            );

        } catch (error) {
            console.error('Error in friendship command:', error);
            await msg.reply('‚ùå Failed to calculate friendship level.');
        }
    },

    // AI Image generation
    imagine: async (conn, msg, args) => {
        try {
            if (!args.length) {
                return msg.reply('‚ùå Please provide a description for the image.\n\nUsage: `+imagine a cat sitting on a rainbow`');
            }

            const prompt = args.join(' ');
            await msg.react('üé®');

            // This would integrate with an AI image generation API
            await msg.reply(
                `üé® *AI Image Generation* üé®\n\n` +
                `üìù Prompt: "${prompt}"\n\n` +
                `‚ö†Ô∏è AI image generation is currently unavailable. This feature requires API integration.\n\n` +
                `_Powered by yourh√Øghness_\n` +
                `üîó ${config.CHANNEL_URL}`
            );

        } catch (error) {
            console.error('Error in imagine command:', error);
            await msg.reply('‚ùå Failed to generate AI image.');
        }
    },

    // Random joke
    joke: async (conn, msg, args) => {
        try {
            await msg.react('üòÇ');
            
            const joke = await getRandomJoke();
            
            await msg.reply(
                `üòÇ *Random Joke* üòÇ\n\n` +
                `${joke}\n\n` +
                `_Hope that made you laugh! - yourh√Øghness_\n` +
                `üîó ${config.CHANNEL_URL}`
            );

        } catch (error) {
            console.error('Error in joke command:', error);
            await msg.reply('‚ùå Failed to fetch a random joke.');
        }
    },

    // Memo game
    memo: async (conn, msg, args) => {
        try {
            const emojis = ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº'];
            const shuffled = [...emojis, ...emojis].sort(() => Math.random() - 0.5);
            
            let board = '';
            for (let i = 0; i < 16; i++) {
                board += `${i + 1}‚É£ `;
                if ((i + 1) % 4 === 0) board += '\n';
            }

            await msg.reply(
                `üß© *Memory Game* üß©\n\n` +
                `${board}\n` +
                `üéØ Find all matching pairs!\n` +
                `üìñ Use \`${config.PREFIX}memo <number>\` to flip a card\n\n` +
                `_yourh√Øghness Memory Challenge_\n` +
                `üîó ${config.CHANNEL_URL}`
            );

        } catch (error) {
            console.error('Error in memo command:', error);
            await msg.reply('‚ùå Failed to start memory game.');
        }
    },

    // Random reaction
    reaction: async (conn, msg, args) => {
        try {
            const reactions = [
                'üòÇ', 'üò≠', 'üòç', 'ü§î', 'üò§', 'üôÑ', 'üò±', 'ü§Ø', 
                'üò¥', 'ü§§', 'üòã', 'ü§™', 'üòé', 'ü•≥', 'üòá', 'ü§†'
            ];
            
            const randomReaction = reactions[Math.floor(Math.random() * reactions.length)];
            
            await msg.react(randomReaction);
            
            await msg.reply(
                `${randomReaction} *Random Reaction* ${randomReaction}\n\n` +
                `Here's your random reaction: ${randomReaction}\n\n` +
                `_Express yourself! - yourh√Øghness_\n` +
                `üîó ${config.CHANNEL_URL}`
            );

        } catch (error) {
            console.error('Error in reaction command:', error);
            await msg.reply('‚ùå Failed to generate random reaction.');
        }
    },

    // Ship compatibility
    ship: async (conn, msg, args) => {
        try {
            if (!msg.isGroup) {
                return msg.reply('‚ùå This command can only be used in groups.');
            }

            const mentioned = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid;
            if (!mentioned || mentioned.length < 2) {
                return msg.reply('‚ùå Please mention two users to ship them.\n\nUsage: `+ship @user1 @user2`');
            }

            const user1 = mentioned[0].split('@')[0];
            const user2 = mentioned[1].split('@')[0];
            const compatibility = Math.floor(Math.random() * 101);
            
            let shipName = user1.substring(0, Math.ceil(user1.length / 2)) + 
                          user2.substring(Math.floor(user2.length / 2));
            
            let status = '';
            if (compatibility < 20) status = 'üíî Not meant to be';
            else if (compatibility < 40) status = 'üòê Just friends';
            else if (compatibility < 60) status = 'üíï Cute couple';
            else if (compatibility < 80) status = '‚ù§Ô∏è Perfect match';
            else status = 'üíñ Soulmates forever';

            await msg.reply(
                `üíï *Ship Compatibility* üíï\n\n` +
                `üë• ${user1} ‚ù§Ô∏è ${user2}\n` +
                `üö¢ Ship Name: ${shipName}\n` +
                `üìä Compatibility: ${compatibility}%\n` +
                `üíñ Status: ${status}\n\n` +
                `${'üíñ'.repeat(Math.floor(compatibility / 20))}${'ü§ç'.repeat(5 - Math.floor(compatibility / 20))}\n\n` +
                `_Love is in the air! - yourh√Øghness_\n` +
                `üîó ${config.CHANNEL_URL}`,
                { mentions: mentioned }
            );

        } catch (error) {
            console.error('Error in ship command:', error);
            await msg.reply('‚ùå Failed to calculate ship compatibility.');
        }
    },

    // Simp meter
    simp: async (conn, msg, args) => {
        try {
            const target = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0] || msg.sender;
            const username = target.split('@')[0];
            const simpLevel = Math.floor(Math.random() * 101);
            
            let status = '';
            if (simpLevel < 20) status = 'üòé Chad Energy';
            else if (simpLevel < 40) status = 'üôÇ Normal Person';
            else if (simpLevel < 60) status = 'üòç Slight Simp';
            else if (simpLevel < 80) status = 'ü§§ Major Simp';
            else status = 'üëë Ultimate Simp Lord';

            await msg.reply(
                `üëë *Simp Meter* üëë\n\n` +
                `üë§ Target: ${username}\n` +
                `üìä Simp Level: ${simpLevel}%\n` +
                `üè∑Ô∏è Status: ${status}\n\n` +
                `${'üíñ'.repeat(Math.floor(simpLevel / 20))}${'‚¨ú'.repeat(5 - Math.floor(simpLevel / 20))}\n\n` +
                `_Don't take it seriously! - yourh√Øghness_\n` +
                `üîó ${config.CHANNEL_URL}`,
                { mentions: [target] }
            );

        } catch (error) {
            console.error('Error in simp command:', error);
            await msg.reply('‚ùå Failed to calculate simp level.');
        }
    },

    // Thug life meme
    'thug-life': async (conn, msg, args) => {
        try {
            if (!msg.quoted || !msg.quoted.isImage) {
                return msg.reply('‚ùå Please reply to an image to add thug life effect.');
            }

            await msg.react('üòé');
            
            const media = await msg.quoted.download();
            
            await conn.sendMessage(msg.from, {
                image: media,
                caption: `üòé *THUG LIFE* üòé\n\n_Deal with it! - yourh√Øghness_\nüîó ${config.CHANNEL_URL}`
            }, { quoted: msg });
            
            await msg.react('‚úÖ');

        } catch (error) {
            console.error('Error in thug-life command:', error);
            await msg.react('‚ùå');
            return msg.reply('‚ùå Failed to create thug life meme.');
        }
    },

    // Triggered meme
    triggered: async (conn, msg, args) => {
        try {
            if (!msg.quoted || !msg.quoted.isImage) {
                return msg.reply('‚ùå Please reply to an image to add triggered effect.');
            }

            await msg.react('üò°');
            
            const media = await msg.quoted.download();
            
            await conn.sendMessage(msg.from, {
                image: media,
                caption: `üò° *TRIGGERED* üò°\n\n_REEEEEEEE! - yourh√Øghness_\nüîó ${config.CHANNEL_URL}`
            }, { quoted: msg });
            
            await msg.react('‚úÖ');

        } catch (error) {
            console.error('Error in triggered command:', error);
            await msg.react('‚ùå');
            return msg.reply('‚ùå Failed to create triggered meme.');
        }
    },

    // Tweet maker
    tweet: async (conn, msg, args) => {
        try {
            if (!args.length) {
                return msg.reply('‚ùå Please provide text for the tweet.\n\nUsage: `+tweet This is my fake tweet!`');
            }

            const tweetText = args.join(' ');
            const username = msg.pushName || msg.sender.split('@')[0];
            
            const tweetFormat = 
                `üê¶ *Twitter* üê¶\n\n` +
                `üë§ @${username}\n` +
                `üí¨ ${tweetText}\n\n` +
                `‚è∞ ${new Date().toLocaleTimeString()} ¬∑ ${new Date().toLocaleDateString()}\n` +
                `üí¨ 0  üîÅ 0  ‚ù§Ô∏è 0  üì§\n\n` +
                `_Fake tweet by yourh√Øghness_\n` +
                `üîó ${config.CHANNEL_URL}`;

            await msg.reply(tweetFormat);

        } catch (error) {
            console.error('Error in tweet command:', error);
            await msg.reply('‚ùå Failed to create fake tweet.');
        }
    }
};

module.exports = { commands };
